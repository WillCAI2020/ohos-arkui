// This file is automatically generated. Do not modify it!
const ABILITY_TYPE_EXTERNAL = 0;
const ABILITY_TYPE_INTERNAL = 1;
const ACTION_SYNC = 0;
const ACTION_ASYNC = 1;
const BUNDLE_NAME = 'cn.crcrc.arkui_v2';
const ABILITY_NAME = 'cn.crcrc.arkui_v2.signServiceStub';
const OPCODE_getAuthCode = 0;
const OPCODE_createUser = 1;
const OPCODE_logInWithCode = 2;
const OPCODE_verifyLoginState = 3;
const OPCODE_getUserInfo = 4;
const sendRequest = async (opcode, data) => {
    var action = {};
    action.bundleName = BUNDLE_NAME;
    action.abilityName = ABILITY_NAME;
    action.messageCode = opcode;
    action.data = data;
    action.abilityType = ABILITY_TYPE_INTERNAL;
    action.syncOption = ACTION_SYNC;
    return FeatureAbility.callAbility(action);
}
class signService {
	async getAuthCode(phoneNumberStr) {
		if (arguments.length != 1) {
			throw new Error("Method expected 1 arguments, got " + arguments.length);
		}
		let data = {};
		data.phoneNumberStr = phoneNumberStr;
		const result = await sendRequest(OPCODE_getAuthCode, data);
		return JSON.parse(result);
	}
	async createUser(phoneNumberStr, verifyCode) {
		if (arguments.length != 2) {
			throw new Error("Method expected 2 arguments, got " + arguments.length);
		}
		let data = {};
		data.phoneNumberStr = phoneNumberStr;
		data.verifyCode = verifyCode;
		const result = await sendRequest(OPCODE_createUser, data);
		return JSON.parse(result);
	}
	async logInWithCode(phoneNumberStr, verifyCode) {
		if (arguments.length != 2) {
			throw new Error("Method expected 2 arguments, got " + arguments.length);
		}
		let data = {};
		data.phoneNumberStr = phoneNumberStr;
		data.verifyCode = verifyCode;
		const result = await sendRequest(OPCODE_logInWithCode, data);
		return JSON.parse(result);
	}
	async verifyLoginState() {
		if (arguments.length != 0) {
			throw new Error("Method expected 0 arguments, got " + arguments.length);
		}
		let data = {};
		const result = await sendRequest(OPCODE_verifyLoginState, data);
		return JSON.parse(result);
	}
	async getUserInfo() {
		if (arguments.length != 0) {
			throw new Error("Method expected 0 arguments, got " + arguments.length);
		}
		let data = {};
		const result = await sendRequest(OPCODE_getUserInfo, data);
		return JSON.parse(result);
	}
}
export default signService;